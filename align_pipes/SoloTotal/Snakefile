########################################################################################################
# STARsolo_10xTotal
#   Snakemake workflow to use STARsolo to align and quantify 10x Chromium datasets
#   v1.0
#   Written by David McKellar
#   Last edited: 8/29/21, DWM
########################################################################################################

import pdb
import pandas as pd
import glob

########################################################################################################
# Config file
########################################################################################################
configfile:'config.yaml'
########################################################################################################
# Directories and locations
########################################################################################################
# DATADIR = config['DATADIR']
TMPDIR = config['TMPDIR']
OUTDIR = config['OUTDIR']

########################################################################################################
# Variables and references
########################################################################################################
SAMPLES = list(pd.read_csv(config['SAMPLE_SHEET'])['sampleID'])
# print("Running STARsolo pipeline for ", SAMPLES)

# R1_FQS = list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R1'])
R1_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R1'])))

# R2_FQS = list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R2'])
R2_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R2'])))
# SAMPLE_SHEET = pd.read_csv(config['SAMPLE_SHEET']

#TODO: finish SRR download automation
# SRR = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['SRR'])))

STAR_REF = config['STAR_REF']
STAR_smRNA_REF = config['STAR_smRNA_REF']

########################################################################################################
# Executables
########################################################################################################
STAR_EXEC = config['STAR_EXEC']

########################################################################################################
rule all:
    input:
        # expand('{OUTDIR}/{sample}_STARsolo/Solo.out/Gene/filtered/matrix.mtx', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}_STARsolo/smRNA/Aligned.sortedByCoord.out.bam.bai', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}_STARsolo/preTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # raw R2 fastQC results
        expand('{OUTDIR}/{sample}_STARsolo/postTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # adapter/polyA/ployG-trimmed R2 fastQC results
        expand('{OUTDIR}/{sample}_STARsolo/smRNA/Solo.out/Gene/raw/matrix.mtx.gz', OUTDIR=config['OUTDIR'], sample=SAMPLES), # count mats - small RNA reference
        expand('{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/Gene/raw/matrix.mtx.gz', OUTDIR=config['OUTDIR'], sample=SAMPLES), # count mats - whole reference genome
        # expand('{OUTDIR}/{sample}_STARsolo/smRNA/qualimap_out/qualimapReport.html', OUTDIR=config['OUTDIR'], sample=SAMPLES), # alignment QC qith qualimap
        expand('{OUTDIR}/{sample}_STARsolo/whole_ref/qualimap_out/qualimapReport.html', OUTDIR=config['OUTDIR'], sample=SAMPLES), # alignment QC qith qualimap
        expand('{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out_plus.bw', OUTDIR=config['OUTDIR'], sample=SAMPLES), # strand-split bigWigs
        expand('{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped_fastqc_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), #fastQC results for unmapped reads
        expand('{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate2_blastResults.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES) # blastn results for unmapped R1 reads


#############################################
## Pre-alignment set up
#############################################
# Unzip the whitelist file if it hasn't been done yet
rule gunzipWhitelist:
    input:
        config['CB_WHITELIST']+'.gz'
    output:
        config['CB_WHITELIST']
    shell:
        """
        gunzip {input}
        """

#############################################
## Reference generation
#############################################

#TODO: smRNA
#TODO: whole reference (whole_ref)


#############################################
## Optional parallel-fastq-dump (if SRR number is passed, instead of .fastq location)
#############################################
# TODO- add multi-SRR number passing (delimit the sample_sheet with ;?)
# rule get_fastqs:
#     output:
#         R1_FQ = DATADIR + '/{sample}/',
#         R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2.fq.gz'
#     params:
#         OUT_DIR = DATADIR + '/{sample}',
#         TMP_DIR = TMPDIR,
#         SRR = lambda wildcards: SRR[wildcards.sample],
#         SAMPLE = '{sample}'
#     run:
#         if len(SRR)==0:
#             print("Downloading .fastq's for ", params.SRR)
#             shell("prefetch --max-size 999999999999 {params.SRR}")
#             shell("parallel-fastq-dump --sra-id {params.SRR} --threads {threads} --outdir {params.OUT_DIR} --tmpdir {params.TMP_DIR} --split-files --gzip")
#
#             # update R1_FQS and R2_FQS
#             R1_FQS[wildcards.sample] = params.OUT_DIR + "/" + wildcards.sample + "/" + params.SRR + "_1.fq.gz"
#             R2_FQS[wildcards.sample] = params.OUT_DIR + "/" + wildcards.sample + "/" + params.SRR + "_2.fq.gz"
#
#             #add R1.fq location and R2.fq location to sample_sheet
#             #TODO
#         else:
#             print("No SRR number for ", params.SAMPLE, "- proceeding without download.\n")


#############################################
## Trimming and FastQC
#############################################

# Merge .fastq files (in case more than one sesquencing run was performed)
rule merge_fastqs:
    output:
        MERGED_R1_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1.fq.gz'),
        MERGED_R2_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2.fq.gz')
    params:
        TMP_DIR = '{OUTDIR}/{sample}_STARsolo/tmp',
        R1_FQ = lambda wildcards: R1_FQS[wildcards.sample],
        R2_FQ = lambda wildcards: R2_FQS[wildcards.sample]
    run:
        if len(params.R1_FQ.split(" "))==1 & len(params.R2_FQ): # shell for single fastq input
            shell("cp {params.R1_FQ} {output.MERGED_R1_FQ}")
            shell("cp {params.R2_FQ} {output.MERGED_R2_FQ}")
        else: # shell enablinging multi-fast input; concatenate inputs
            print("Concatenating",len(params.R1_FQ.split(" ")), ".fastq's for", wildcards.sample)
            shell("mkdir -p {params.TMP_DIR}")
            shell("zcat {params.R1_FQ} > {params.TMP_DIR}/{wildcards.sample}_R1.fq")
            shell("zcat {params.R2_FQ} > {params.TMP_DIR}/{wildcards.sample}_R2.fq")
            shell("gzip {params.TMP_DIR}/*.fq")

rule preTrim_FastQC_R2:
    input:
        MERGED_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}_STARsolo/preTrim_fastqc_R2_out'),
        # fastqcReport = ''
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.MERGED_R2_FQ}
        """

#TODO: log not working...
rule trimPolyA_R2:
    input:
        MERGED_R1_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1.fq.gz',
        MERGED_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2.fq.gz'
    output:
        A_TRIMMED_R1_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1_Atrimmed.fq.gz'),
        A_TRIMMED_R2_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_Atrimmed.fq.gz')
        # POLYA_REPORT = '{OUTDIR}/{sample}_STARsolo/cutadapt_polyA_report.txt'
    params:
        THREE_PRIME_R2_POLYA = "A"*100,
        FIVE_PRIME_R2 = "CCCATGTACTCTGCGTTGATACCACTGCTT" #10x TSO sequence
        # FIVE_PRIME_R2 = "TTCGTCACCATAGTTGCGTCTCATGTACCC" #rev 10x TSO sequence
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    log:
        '{OUTDIR}/{sample}_STARsolo/cutadapt_polyA_report.txt'
    shell:
        """
        # TSO & polyA trimming
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYA} \
 		-G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
 		-o {output.A_TRIMMED_R1_FQ} \
        -p {output.A_TRIMMED_R2_FQ} \
        --cores {threads} \
        {input.MERGED_R1_FQ} {input.MERGED_R2_FQ} 1> {log}
        """
        # 2> {output.POLYA_REPORT}

#Additional trimming step, just for 2-color Illumina chemistries (NextSeq, etc.)
#TODO: log not working...
rule trimPolyG_R2:
    input:
        A_TRIMMED_R1_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1_Atrimmed.fq.gz',
        A_TRIMMED_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_Atrimmed.fq.gz'
    output:
        FINAL_R1_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1_final.fq.gz'),
        FINAL_R2_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_final.fq.gz'),
        # POLYG_REPORT = '{OUTDIR}/{sample}_STARsolo/cutadapt_polyG_report.txt'
    params:
        THREE_PRIME_R2_POLYG = "G"*100,
        FIVE_PRIME_R2 = "AAGCAGTGGTATCAACGCAGAGTACATGGG" # rev-comp of 10x TSO sequence
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    log:
        '{OUTDIR}/{sample}_STARsolo/cutadapt_polyG_report.txt'
    shell:
        """
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYG} \
 		-G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
 		-o {output.FINAL_R1_FQ} \
        -p {output.FINAL_R2_FQ} \
        --cores {threads} \
        {input.A_TRIMMED_R1_FQ} {input.A_TRIMMED_R2_FQ} 1> {log}
        """
        # 2> {output.POLYG_REPORT}

        #*Note- tried `--polyA` flag in trim_galore with no luck, unfortunately...
        # trim_galore \
        # --length 10 \
        # --cores {threads} \
        # --basename {params.SAMPLE}_R2 \
        # --nextera \
        # --polyA \
        # --phred33 \
        # {params.R2_FQ}

rule postTrim_FastQC_R2:
    input:
        FINAL_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_final.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}_STARsolo/postTrim_fastqc_R2_out'),
        # fastqcReport = ''
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.FINAL_R2_FQ}
        """

#############################################
## Alignment
#############################################

# Make output directory, align fastqs, and generate raw/filtered feature/cell-barcode matrices
#   Info for STARsolo command line paramaters: https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md
#   Alignment parameters partially taken from smart-seq-total: https://github.com/aisakova/smart-seq-total
#   Inspiration for iterative alignment strategy: https://github.com/Sethupathy-Lab/miRquant

#TODO:
## Notes on tRNA alignment parameters:
# - Multimap settings are important (~5X as many reads retained) b/c of similar sequences
#       https://www.sciencedirect.com/science/article/pii/S2001037020303032
# - Very restrictive value for outFilterMismatchNoverLmax (0.75) to only keep high confidence mapped reads
# - --alignIntronMax=0 removes splicing options
rule starSOLO_smRNA_align:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        R1_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1_final.fq.gz',
        R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_final.fq.gz'
    output:
        smRNA_DIR = directory('{OUTDIR}/{sample}_STARsolo/smRNA/'),
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/smRNA/Aligned.sortedByCoord.out.bam',
        GENE = directory('{OUTDIR}/{sample}_STARsolo/smRNA/Solo.out/Gene'),
        GENEMAT = '{OUTDIR}/{sample}_STARsolo/smRNA/Solo.out/Gene/raw/matrix.mtx.gz',
        # GENEFULL = directory('{OUTDIR}/{sample}_STARsolo/smRNA/Solo.out/GeneFull'),
        UNMAPPED1_FQ = temp('{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate1_smRNA.fq'),
        UNMAPPED2_FQ = temp('{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2_smRNA.fq')
    params:
        R1_FQ = lambda wildcards: R1_FQS[wildcards.sample],
        R2_FQ = lambda wildcards: R2_FQS[wildcards.sample],
        STAR_EXEC = config['STAR_EXEC'],
        STAR_REF = config['STAR_smRNA_REF'],
        UMIlen = config['UMIlen'],
        MEMLIMIT = config['MEMLIMIT']
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {output.smRNA_DIR}

        {params.STAR_EXEC} \
        --runThreadN {threads} \
        --outFileNamePrefix {output.smRNA_DIR}/ \
        --outSAMtype BAM SortedByCoordinate \
        --outSAMattributes NH HI nM AS CR UR CB UB GX GN sS sQ sM \
        --readFilesCommand zcat \
        --genomeDir {params.STAR_REF} \
        --genomeLoad LoadAndKeep \
        --limitBAMsortRAM={params.MEMLIMIT} \
        --readFilesIn {input.R2_FQ} {input.R1_FQ} \
        --clipAdapterType CellRanger4 \
        --alignIntronMax 0 \
        --outReadsUnmapped Fastx \
        --outFilterMismatchNoverLmax 0.75 \
        --outFilterMatchNmin 16 \
        --outFilterScoreMinOverLread 0 \
        --outFilterMatchNminOverLread 0 \
        --soloType CB_UMI_Simple \
        --soloUMIlen {params.UMIlen} \
        --soloCBwhitelist {input.CB_WHITELIST} \
        --soloFeatures Gene GeneFull \
        --soloCellFilter EmptyDrops_CR \
        --outFilterMultimapNmax 50 \
        --soloMultiMappers EM

        mv {output.smRNA_DIR}/Unmapped.out.mate1 {output.UNMAPPED2_FQ}
        mv {output.smRNA_DIR}/Unmapped.out.mate2 {output.UNMAPPED1_FQ}

        gzip -qf {output.GENE}/raw/*
        gzip -qf {output.GENE}/filtered/*
        """

## TODO:
# - adjust alignment parameters?
rule STARsolo_wholeref_align:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        R1_FQ = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate1_smRNA.fq',
        R2_FQ = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2_smRNA.fq'
    output: #TODO- add more output files?
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out.bam',
        OUTDIR = directory('{OUTDIR}/{sample}_STARsolo/whole_ref/'),
        UNMAPPED1 = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate1',
        UNMAPPED2 = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate2',
        GENE = directory('{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/Gene'),
        GENEFULL = directory('{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/GeneFull'),
        SJ = directory('{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/SJ'),
        VEL = directory('{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/Velocyto'),
        GENEMAT = '{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/Gene/raw/matrix.mtx.gz',
        GENEFULLMAT = '{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/GeneFull/raw/matrix.mtx.gz',
        SJMAT = '{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/SJ/raw/matrix.mtx.gz',
        VELMAT = '{OUTDIR}/{sample}_STARsolo/whole_ref/Solo.out/Velocyto/raw/spliced.mtx.gz'
    params:
        # R1_FQ = lambda wildcards: R1_FQS[wildcards.sample],
        # R2_FQ = lambda wildcards: R2_FQS[wildcards.sample],
        # OUTDIR = config['OUTDIR'],
        STAR_EXEC = config['STAR_EXEC'],
        STAR_REF = config['STAR_REF'],
        UMIlen = config['UMIlen'],
        MEMLIMIT = config['MEMLIMIT']
    threads:
        config['CORES']
    shell: # TODO- convert to bash script?
        """
        {params.STAR_EXEC} \
        --runThreadN {threads} \
        --outFileNamePrefix {output.OUTDIR}/ \
        --outSAMtype BAM SortedByCoordinate \
        --outSAMattributes NH HI nM AS CR UR CB UB GX GN sS sQ sM \
        --genomeDir {params.STAR_REF} \
        --genomeLoad LoadAndKeep \
        --limitBAMsortRAM={params.MEMLIMIT} \
        --readFilesIn {input.R2_FQ} {input.R1_FQ} \
        --clipAdapterType CellRanger4 \
        --outReadsUnmapped Fastx \
        --outFilterMismatchNoverLmax 0.05 \
        --outFilterMatchNmin 16 \
        --outFilterScoreMinOverLread 0 \
        --outFilterMatchNminOverLread 0 \
        --outFilterMultimapNmax 50 \
        --soloUMIlen {params.UMIlen} \
        --soloType CB_UMI_Simple \
        --soloCBwhitelist {input.CB_WHITELIST} \
        --soloCellFilter EmptyDrops_CR \
        --soloFeatures Gene GeneFull SJ Velocyto \
        --soloMultiMappers EM

        gzip -qf {output.GENE}/raw/*
        gzip -qf {output.GENE}/filtered/*

        gzip -qf {output.GENEFULL}/raw/*
        gzip -qf {output.GENEFULL}/filtered/*

        gzip -qf {output.SJ}/raw/*

        gzip -qf {output.VEL}/raw/*
        gzip -qf {output.VEL}/filtered/*
        """
# mkdir -p {params.OUTDIR}/{wildcards.sample}_STARsolo

rule indexBAM_wholeref:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out.bam'
    output:
        BAI = '{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out.bam.bai'
    threads:
        config['CORES']
    shell:
        """
        samtools index -@ {threads} {input.SORTEDBAM}
        """

rule indexBAM_smRNA:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/smRNA/Aligned.sortedByCoord.out.bam'
    output:
        BAI = '{OUTDIR}/{sample}_STARsolo/smRNA/Aligned.sortedByCoord.out.bam.bai'
    threads:
        config['CORES']
    shell:
        """
        samtools index -@ {threads} {input.SORTEDBAM}
        """


#############################################
## qualimap on aligned reads
#############################################
rule qualimapQC_smRNA:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/smRNA/Aligned.sortedByCoord.out.bam'
    output:
        qualimapDir = directory('{OUTDIR}/{sample}_STARsolo/smRNA/qualimap_out'),
        fastqcReport = '{OUTDIR}/{sample}_STARsolo/smRNA/qualimap_out/qualimapReport.html'
    params:
        GENES_GTF = config['smRNA_FEATURES_GTF'] #smRNA features
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {output.qualimapDir}
        cd {output.qualimapDir}

        qualimap rnaseq \
        -bam {input.SORTEDBAM} \
        -gtf {params.GENES_GTF} \
        --sequencing-protocol strand-specific-forward \
        --sorted \
        --java-mem-size=4G \
        -outdir {output.qualimapDir} \
        -outformat html
        """

rule qualimapQC_wholeref:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out.bam'
    output:
        qualimapDir = directory('{OUTDIR}/{sample}_STARsolo/whole_ref/qualimap_out'),
        fastqcReport = '{OUTDIR}/{sample}_STARsolo/whole_ref/qualimap_out/qualimapReport.html'
    params:
        GENES_GTF = config['GENES_GTF']
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {output.qualimapDir}
        cd {output.qualimapDir}

        qualimap rnaseq \
        -bam {input.SORTEDBAM} \
        -gtf {params.GENES_GTF} \
        --sequencing-protocol strand-specific-forward \
        --sorted \
        --java-mem-size=4G \
        -outdir {output.qualimapDir} \
        -outformat html
        """

        # -nt {threads} \

#############################################
## Unmapped read analyses
#############################################

# Run fastqc on unmapped reads; switch names because of STAR weirdness
rule unmapped_fastqc:
    input:
        UNMAPPED1 = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate1',
        UNMAPPED2 = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate2'
    output:
        UNMAPPED1_FQ = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate1.fastq',
        UNMAPPED2_FQ = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate2.fastq',
        FQC_DIR = directory('{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped_fastqc_out')
    params:
        FASTQC_EXEC = config['FASTQC_EXEC']
    threads:
        config['CORES']
    shell:
        """
        mv {input.UNMAPPED1} {output.UNMAPPED2_FQ}
        mv {input.UNMAPPED2} {output.UNMAPPED1_FQ}

        mkdir -p {output.FQC_DIR}

        {params.FASTQC_EXEC} -o {output.FQC_DIR} -t {threads} {output.UNMAPPED1_FQ} {output.UNMAPPED2_FQ}
        """

# Only BLAST R1, which contains the insert (converts .fq to .fa, then removes the .fa file)
## TODO: change demux step to fastx-collapser
rule blast_unmapped:
    input:
        UNMAPPED2_FQ = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate2.fastq'
    output:
        BLAST_R2 = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate2_blastResults.txt'
    threads:
        config['CORES']
    params:
        blastDB = config['BLASTDB'],
        FASTX_COLLAPSER = config['FASTX_COLLAPSER'],
        TMP_FA = '{OUTDIR}/{sample}_STARsolo/whole_ref/Unmapped.out.mate2.fa'
    shell:
        """
        sed -n '1~4s/^@/>/p;2~4p' {input.UNMAPPED2_FQ} > {params.TMP_FA}

        echo "Number of unmapped reads: "
        grep -c ">" {params.TMP_FA}

        vsearch --sortbysize {params.TMP_FA} --topn 1000 --output tmp.fa

        blastn -db {params.blastDB}/nt \
        -query tmp.fa \
        -out {output.BLAST_R2} \
        -outfmt '6 qseqid sseqid stitle pident length mismatch gapopen qstart qend sstart send evalue bitscore' \
        -max_target_seqs 5 \
        -num_threads {threads}

        rm {params.TMP_FA}
		"""

# cat {input.UNMAPPED1_FQ} | awk '{{if(NR%4==1) {{printf(">%s\n",substr($0,2));}} else if(NR%4==2) print;}}' > {params.TMP_FA}


#############################################
## Additional files for visualization
#############################################

rule bamToSplitBigWig:
    input:
        BAM = '{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out.bam',
        BAI = '{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out.bam.bai'
    output:
        POS_BW = '{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out_plus.bw',
        NEG_BW = '{OUTDIR}/{sample}_STARsolo/whole_ref/Aligned.sortedByCoord.out_minus.bw'
    params:
        BAM2SPLITBW=config['BAM2SPLITBW'],
        STAR_REF = config['STAR_REF'],
        OUTPUT_DIR = '{OUTDIR}/{sample}_STARsolo/whole_ref'
    threads:
        config['CORES']
    shell:
        """
        {params.BAM2SPLITBW} {input.BAM} {threads} {params.OUTPUT_DIR} {STAR_REF}/chrNameLength.txt
        """
