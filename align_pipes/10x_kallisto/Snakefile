########################################################################################################
# 10x_kallisto
#   Snakemake workflow to use kallisto/bustools to align and quantify 10x Chromium datasets
#   v1.0
#   Written by David McKellar
#   Last edited: 5/10/21, DWM
########################################################################################################

########################################################################################################
# Sources
#   https://www.kallistobus.tools/
########################################################################################################

import pdb
import pandas as pd
import glob

########################################################################################################
# Config file
########################################################################################################
configfile:'config.yaml'
########################################################################################################
# Directories and locations
########################################################################################################
OUTDIR = config['OUTDIR']

########################################################################################################
# Variables and references
########################################################################################################
SAMPLES = list(pd.read_csv(config['SAMPLE_SHEET'])['sampleID'])
R1_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R1'])))
R2_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R2'])))

########################################################################################################
# Executables
########################################################################################################
KB_EXEC = config['KB_EXEC']

########################################################################################################
rule all:
    input:
        # expand('{OUTDIR}/{sample}/Solo.out/Gene/filtered/matrix.mtx', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        # expand('{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam.bai', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}/preTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # raw R2 fastQC results
        expand('{OUTDIR}/{sample}/postTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # adapter/polyA/ployG-trimmed R2 fastQC results
        expand('{OUTDIR}/{sample}/cutadapt_polyA_report.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}/cutadapt_polyG_report.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}/kb_standard/counts_filtered/adata.h5ad', OUTDIR=config['OUTDIR'], sample=SAMPLES), # count mats
        expand('{OUTDIR}/{sample}/kb_lamanno/counts_filtered/adata.h5ad', OUTDIR=config['OUTDIR'], sample=SAMPLES)
        # expand('{OUTDIR}/{sample}/qualimap_out/qualimapReport.html', OUTDIR=config['OUTDIR'], sample=SAMPLES), # alignment QC qith qualimap plotgardener)
        # expand('{OUTDIR}/{sample}/Unmapped_fastqc_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), #fastQC results for unmapped reads
        # expand('{OUTDIR}/{sample}/Unmapped.out.mate2_blastResults.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES), # blastn results for unmapped R1 reads
        # expand('{OUTDIR}/{sample}/Aligned.sortedByCoord.out_plus.bw', OUTDIR=config['OUTDIR'], sample=SAMPLES), # strand-split bigWigs
        # expand('{OUTDIR}/{sample}/Aligned.sortedByCoord.out_merged.bw', OUTDIR=config['OUTDIR'], sample=SAMPLES) # non-strand-split bigWigs (for


#############################################
## Pre-alignment set up
#############################################
# Unzip the whitelist file if it hasn't been done yet
rule gunzipWhitelist:
    input:
        config['CB_WHITELIST']+'.gz'
    output:
        config['CB_WHITELIST']
    shell:
        """
        gunzip {input}
        """

#############################################
## Trimming and FastQC
#############################################

# Merge .fastq files (in case more than one sesquencing run was performed)
rule merge_fastqs:
    output:
        MERGED_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1.fq.gz'),
        MERGED_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz')
    params:
        TMP_DIR = '{OUTDIR}/{sample}/tmp',
        R1_FQ = lambda wildcards: R1_FQS[wildcards.sample],
        R2_FQ = lambda wildcards: R2_FQS[wildcards.sample]
    threads:
        config['CORES']
    run:
        if len(params.R1_FQ.split(" "))==1 & len(params.R2_FQ.split(" "))==1: # shell for single fastq input
            shell("cp {params.R1_FQ} {output.MERGED_R1_FQ}")
            shell("cp {params.R2_FQ} {output.MERGED_R2_FQ}")
        else: # shell enablinging multi-fastq input; concatenate inputs
            print("Concatenating",len(params.R1_FQ.split(" ")), ".fastq's for {wildcards.sample}")
            shell("mkdir -p {params.TMP_DIR}")
            shell("zcat {params.R1_FQ} > {params.TMP_DIR}/{wildcards.sample}_R1.fq")
            shell("zcat {params.R2_FQ} > {params.TMP_DIR}/{wildcards.sample}_R2.fq")
            shell("pigz -p {threads} {params.TMP_DIR}/*.fq")

rule preTrim_FastQC_R2:
    input:
        MERGED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}/preTrim_fastqc_R2_out')
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.MERGED_R2_FQ}
        """

#TODO: log not working...
rule trimPolyA_R2:
    input:
        MERGED_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1.fq.gz',
        MERGED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2.fq.gz'
    output:
        A_TRIMMED_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1_Atrimmed.fq.gz'),
        A_TRIMMED_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2_Atrimmed.fq.gz'),
        POLYA_REPORT = '{OUTDIR}/{sample}/cutadapt_polyA_report.txt'
    params:
        THREE_PRIME_R2_POLYA = "A"*100,
        FIVE_PRIME_R2 = "CCCATGTACTCTGCGTTGATACCACTGCTT" #10x TSO sequence
        # FIVE_PRIME_R2 = "TTCGTCACCATAGTTGCGTCTCATGTACCC" #rev 10x TSO sequence
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    log:
        '{OUTDIR}/{sample}/cutadapt_polyA_report.txt'
    shell:
        """
        # TSO & polyA trimming
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYA} \
 		-G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
 		-o {output.A_TRIMMED_R1_FQ} \
        -p {output.A_TRIMMED_R2_FQ} \
        --cores {threads} \
        {input.MERGED_R1_FQ} {input.MERGED_R2_FQ} 1> {log}
        """
        # 2> {output.POLYA_REPORT}

#Additional trimming step, just for 2-color Illumina chemistries (NextSeq, etc.)
rule trimPolyG_R2:
    input:
        A_TRIMMED_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_Atrimmed.fq.gz',
        A_TRIMMED_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_Atrimmed.fq.gz'
    output:
        FINAL_R1_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz'),
        FINAL_R2_FQ = temp('{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'),
        POLYG_REPORT = '{OUTDIR}/{sample}/cutadapt_polyG_report.txt'
    params:
        THREE_PRIME_R2_POLYG = "G"*100,
        FIVE_PRIME_R2 = "AAGCAGTGGTATCAACGCAGAGTACATGGG" # rev-comp of 10x TSO sequence
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    log:
        log = '{OUTDIR}/{sample}/cutadapt_polyG_report.txt'
    shell:
        """
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYG} \
 		-G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
 		-o {output.FINAL_R1_FQ} \
        -p {output.FINAL_R2_FQ} \
        --cores {threads} \
        {input.A_TRIMMED_R1_FQ} {input.A_TRIMMED_R2_FQ} 1> {log.log}
        """
        # 2> {output.POLYG_REPORT}

        #*Note- tried `--polyA` flag in trim_galore with no luck, unfortunately...
        # trim_galore \
        # --length 10 \
        # --cores {threads} \
        # --basename {params.SAMPLE}_R2 \
        # --nextera \
        # --polyA \
        # --phred33 \
        # {params.R2_FQ}

rule postTrim_FastQC_R2:
    input:
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}/postTrim_fastqc_R2_out'),
        # fastqcReport = ''
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.FINAL_R2_FQ}
        """

#############################################
## Alignment
#############################################
# Make output directory, align fastqs, and generate raw/filtered feature/cell-barcode matrices
#   Info on kallisto/bustools: https://www.kallistobus.tools/
#TODO gzip outputs w/ pigz
rule kb_standard:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz',
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        COUNTMAT = '{OUTDIR}/{sample}/kb_standard/counts_filtered/adata.h5ad'
    params:
        OUTDIR = config['OUTDIR'],
        KB_EXEC = config['KB_EXEC'],
        KB_IDX = config['KB_IDX'],
        KB_T2G = config['KB_T2G'],
        UMIlen = config['UMIlen'],
        MEMLIMIT = config['MEMLIMIT']
    log:
        '{OUTDIR}/{sample}/kb_standard/kallisto_standard.log'
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {params.OUTDIR}/{wildcards.sample}

        {params.KB_EXEC} count \
        -i {params.KB_IDX} \
        -g {params.KB_T2G} \
        -x 10xv3 \
        -o {params.OUTDIR}/{wildcards.sample}/kb_standard/ \
        -t {threads} \
        -m {params.MEMLIMIT} \
        -w {input.CB_WHITELIST} \
        --mm \
        --filter \
        --h5ad \
        --workflow standard \
        {input.FINAL_R1_FQ} {input.FINAL_R2_FQ} > {log}
        """

        # gzip -qf {params.OUTDIR}/{wildcards.sample}/kb_standard/counts_filtered/*.txt
        # gzip -qf {params.OUTDIR}/{wildcards.sample}/kb_standard/counts_filtered/*.mtx
        #
        # gzip -qf {params.OUTDIR}/{wildcards.sample}/kb_standard/counts_unfiltered/*.txt
        # gzip -qf {params.OUTDIR}/{wildcards.sample}/kb_standard/counts_unfiltered/*.mtx

#TODO gzip outputs w/ pigz
rule kb_lamanno:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz',
        FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
    output:
        COUNTMAT = '{OUTDIR}/{sample}/kb_lamanno/counts_filtered/adata.h5ad'
    params:
        OUTDIR = config['OUTDIR'],
        KB_EXEC = config['KB_EXEC'],
        KBL_IDX = config['KBL_IDX'],
        KBL_T2G = config['KBL_T2G'],
        KBL_CDNA_T2C = config['KBL_CDNA_T2C'],
        KBL_INTRON_T2C = config['KBL_INTRON_T2C'],
        UMIlen = config['UMIlen'],
        MEMLIMIT = config['MEMLIMIT']
    log:
        '{OUTDIR}/{sample}/kb_lamanno/kallisto_lamanno.log'
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {params.OUTDIR}/{wildcards.sample}

        {params.KB_EXEC} count \
        -i {params.KBL_IDX} \
        -g {params.KBL_T2G} \
        -x 10xv3 \
        -o {params.OUTDIR}/{wildcards.sample}/kb_lamanno/ \
        -t {threads} \
        -m {params.MEMLIMIT} \
        -w {input.CB_WHITELIST} \
        --mm \
        --filter \
        --h5ad \
        --workflow lamanno \
        -c1 {params.KBL_CDNA_T2C} \
        -c2 {params.KBL_INTRON_T2C} \
        {input.FINAL_R1_FQ} {input.FINAL_R2_FQ} > {log}
        """

        # gzip -qf {params.OUTDIR}/{wildcards.sample}/kb_lamanno/counts_filtered/*.txt
        # gzip -qf {params.OUTDIR}/{wildcards.sample}/kb_lamanno/counts_filtered/*.mtx
        #
        # gzip -qf {params.OUTDIR}/{wildcards.sample}/kb_lamanno/counts_unfiltered/*.txt
        # gzip -qf {params.OUTDIR}/{wildcards.sample}/kb_lamanno/counts_unfiltered/*.mtx


# Output pseudobam files for coverage plots, etc.
# rule kallisto_genomebam:
#     input:
#         CB_WHITELIST = config['CB_WHITELIST'],
#         FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R1_final.fq.gz',
#         FINAL_R2_FQ = '{OUTDIR}/{sample}/tmp/{sample}_R2_final.fq.gz'
#     output:
#         GENMOEBAME_DIR = directory('{OUTDIR}/{sample}/kallisto_bam')
#         COUNTMAT = '{OUTDIR}/{sample}/kb_lamanno/counts_filtered/adata.h5ad'
#     params:
#         OUTDIR = config['OUTDIR'],
#         KB_EXEC = config['KB_EXEC'],
#         KBL_IDX = config['KBL_IDX'],
#         KBL_T2G = config['KBL_T2G'],
#         KBL_CDNA_T2C = config['KBL_CDNA_T2C'],
#         KBL_INTRON_T2C = config['KBL_INTRON_T2C'],
#         UMIlen = config['UMIlen'],
#         MEMLIMIT = config['MEMLIMIT']
#     threads:
#         config['CORES']
#     shell:
#     """
#     {params.KB_EXEC} quant \
#     -i index \
#     -o {output.GENOMEBAM_DIR} \
#     --genomebam \
#     --chromosomes
#     --gtf
#     --single \
#     -l 200 \
#     -s 20 \
#     -t {threads} \
#     file1.fastq.gz file2.fastq.gz
#     """

#############################################
## qualimap on aligned reads
#############################################
# rule qualimapQC:
#     input:
#         SORTEDBAM = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam'
#     output:
#         qualimapDir = directory('{OUTDIR}/{sample}/qualimap_out'),
#         fastqcReport = '{OUTDIR}/{sample}/qualimap_out/qualimapReport.html'
#     params:
#         GENES_GTF = config['GENES_GTF']
#     threads:
#         config['CORES']
#     shell:
#         """
#         mkdir -p {output.qualimapDir}
#         cd {output.qualimapDir}
#
#         qualimap rnaseq \
#         -bam {input.SORTEDBAM} \
#         -gtf {params.GENES_GTF} \
#         --sequencing-protocol strand-specific-forward \
#         --sorted \
#         --java-mem-size=4G \
#         -outdir {output.qualimapDir} \
#         -outformat html
#         """

        # -nt {threads} \

#############################################
## Unmapped read analyses
#############################################
#TODO
# Run fastqc on unmapped reads; switch names because of STAR weirdness
# rule unmapped_fastqc:
#     input:
#         UNMAPPED1 = '{OUTDIR}/{sample}/Unmapped.out.mate1',
#         UNMAPPED2 = '{OUTDIR}/{sample}/Unmapped.out.mate2'
#     output:
#         UNMAPPED1_FQ = '{OUTDIR}/{sample}/Unmapped.out.mate1.fastq.gz',
#         UNMAPPED2_FQ = '{OUTDIR}/{sample}/Unmapped.out.mate2.fastq.gz',
#         FQC_DIR = directory('{OUTDIR}/{sample}/Unmapped_fastqc_out')
#     params:
#         FASTQC_EXEC = config['FASTQC_EXEC']
#     threads:
#         config['CORES']
#     shell:
#         """
#         mv {input.UNMAPPED1} {input.UNMAPPED2}.fastq
#         mv {input.UNMAPPED2} {input.UNMAPPED1}.fastq
#
#         pigz -p{threads} {input.UNMAPPED1}.fastq {input.UNMAPPED2}.fastq
#
#         mkdir -p {output.FQC_DIR}
#
#         {params.FASTQC_EXEC} -o {output.FQC_DIR} -t {threads} {output.UNMAPPED1_FQ} {output.UNMAPPED2_FQ}
#         """


# Only BLAST R2, which contains the insert (converts .fq to .fa, then removes the .fa file)
## TODO: change demux step to fastx-collapser
# rule blast_unmapped:
#     input:
#         UNMAPPED2_FQ = '{OUTDIR}/{sample}/Unmapped.out.mate2.fastq.gz'
#     output:
#         BLAST_R2 = '{OUTDIR}/{sample}/Unmapped.out.mate2_blastResults.txt'
#     threads:
#         config['CORES']
#     params:
#         blastDB = config['BLASTDB'],
#         FASTX_COLLAPSER = config['FASTX_COLLAPSER'],
#         TMP_FA = '{OUTDIR}/{sample}/Unmapped.out.mate2.fa'
#     shell:
#         """
#         zcat {input.UNMAPPED2_FQ} | sed -n '1~4s/^@/>/p;2~4p' > {params.TMP_FA}
#
#         echo "Number of unmapped reads: "
#         grep -c ">" {params.TMP_FA}
#
#         vsearch --sortbysize {params.TMP_FA} --topn 1000 --output tmp.fa
#
#         blastn -db {params.blastDB}/nt \
#         -query tmp.fa \
#         -out {output.BLAST_R2} \
#         -outfmt '6 qseqid sseqid stitle pident length mismatch gapopen qstart qend sstart send evalue bitscore' \
#         -max_target_seqs 5 \
#         -num_threads {threads}
#
#         rm {params.TMP_FA}
# 		"""

# cat {input.UNMAPPED1_FQ} | awk '{{if(NR%4==1) {{printf(">%s\n",substr($0,2));}} else if(NR%4==2) print;}}' > {params.TMP_FA}


#############################################
## Additional files for visualization
#############################################
#TODO
# rule bamToSplitBigWig:
#     input:
#         BAM = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam',
#         BAI = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out.bam.bai'
#     output:
#         POS_BW = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out_plus.bw',
#         MERGED_BW = '{OUTDIR}/{sample}/Aligned.sortedByCoord.out_merged.bw'
#     params:
#         BAM2SPLITBW=config['BAM2SPLITBW'],
#         # STAR_REF = config['STAR_REF'],
#         OUTPUT_DIR = '{OUTDIR}/{sample}'
#     threads:
#         config['CORES']
#     shell:
#         """
#         {params.BAM2SPLITBW} {input.BAM} {threads} {params.OUTPUT_DIR}
#         """
# {STAR_REF}/chrNameLength.txt
