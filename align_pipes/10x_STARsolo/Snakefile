########################################################################################################
# STARsolo_10x
#   Snakemake workflow to use STARsolo to align and quantify 10x Chromium datasets
#   v1.0
#   Written by David McKellar
#   Last edited: 5/10/21, DWM
########################################################################################################

import pdb
import pandas as pd
import glob

########################################################################################################
# Config file
########################################################################################################
configfile:'config.yaml'
########################################################################################################
# Directories and locations
########################################################################################################
DATADIR = config['DATADIR']
TMPDIR = config['TMPDIR']
OUTDIR = config['OUTDIR']

########################################################################################################
# Variables and references
########################################################################################################
SAMPLES = list(pd.read_csv(config['SAMPLE_SHEET'])['sampleID'])

R1_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R1'])))
R2_FQS = dict(zip(SAMPLES, list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_R2'])))

STAR_REF = config['STAR_REF']

########################################################################################################
# Executables
########################################################################################################
STAR_EXEC = config['STAR_EXEC']

########################################################################################################
#TODO: add miRge output(s)
rule all:
    input:
        # expand('{OUTDIR}/{sample}_STARsolo/Solo.out/Gene/filtered/matrix.mtx', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam.bai', OUTDIR=config['OUTDIR'], sample=SAMPLES), #non-deduplicated .bam; used for saturation estimation
        expand('{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out.bam.bai', OUTDIR=config['OUTDIR'], sample=SAMPLES), # umi_tools deduplicated .bam 
        expand('{OUTDIR}/{sample}_STARsolo/preTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # raw R2 fastQC results
        expand('{OUTDIR}/{sample}_STARsolo/postTrim_fastqc_R2_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), # adapter/polyA/ployG-trimmed R2 fastQC results
        expand('{OUTDIR}/{sample}_STARsolo/cutadapt_polyA_report.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}_STARsolo/cutadapt_polyG_report.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES),
        expand('{OUTDIR}/{sample}_STARsolo/qualimap_out/qualimapReport.html', OUTDIR=config['OUTDIR'], sample=SAMPLES), # alignment QC qith qualimap plotgardener)
        expand('{OUTDIR}/{sample}_STARsolo/Solo.out/Velocyto/raw/spliced.mtx.gz', OUTDIR=config['OUTDIR'], sample=SAMPLES), # count mats
        expand('{OUTDIR}/{sample}_STARsolo/Unmapped_fastqc_out', OUTDIR=config['OUTDIR'], sample=SAMPLES), #fastQC results for unmapped reads
        expand('{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2_blastResults.txt', OUTDIR=config['OUTDIR'], sample=SAMPLES), # blastn results for unmapped R1 reads
        expand('{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out_plus.bw', OUTDIR=config['OUTDIR'], sample=SAMPLES), # strand-split bigWigs
        expand('{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out_merged.bw', OUTDIR=config['OUTDIR'], sample=SAMPLES) # non-strand-split bigWigs (for


#############################################
## Pre-alignment set up
#############################################
# Unzip the whitelist file if it hasn't been done yet
rule gunzipWhitelist:
    input:
        config['CB_WHITELIST']+'.gz'
    output:
        config['CB_WHITELIST']
    shell:
        """
        gunzip {input}
        """

#############################################
## Trimming and FastQC
#############################################

# Merge .fastq files (in case more than one sesquencing run was performed)
rule merge_fastqs:
    output:
        MERGED_R1_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1.fq.gz'),
        MERGED_R2_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2.fq.gz')
    params:
        TMP_DIR = '{OUTDIR}/{sample}_STARsolo/tmp',
        R1_FQ = lambda wildcards: R1_FQS[wildcards.sample],
        R2_FQ = lambda wildcards: R2_FQS[wildcards.sample]
    threads:
        config['CORES']
    run:
        if len(params.R1_FQ.split(" "))==1 & len(params.R2_FQ.split(" "))==1: # shell for single fastq input
            shell("cp {params.R1_FQ} {output.MERGED_R1_FQ}")
            shell("cp {params.R2_FQ} {output.MERGED_R2_FQ}")
        else: # shell enablinging multi-fast input; concatenate inputs
            print("Concatenating",len(params.R1_FQ.split(" ")), ".fastq's for", wildcards.sample)
            shell("mkdir -p {params.TMP_DIR}")
            shell("zcat {params.R1_FQ} > {params.TMP_DIR}/{wildcards.sample}_R1.fq")
            shell("zcat {params.R2_FQ} > {params.TMP_DIR}/{wildcards.sample}_R2.fq")
            shell("pigz -p {threads} {params.TMP_DIR}/*.fq")

rule preTrim_FastQC_R2:
    input:
        MERGED_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}_STARsolo/preTrim_fastqc_R2_out'),
        # fastqcReport = ''
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.MERGED_R2_FQ}
        """

rule trimPolyA_R2:
    input:
        MERGED_R1_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1.fq.gz',
        MERGED_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2.fq.gz'
    output:
        A_TRIMMED_R1_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1_Atrimmed.fq.gz'),
        A_TRIMMED_R2_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_Atrimmed.fq.gz'),
        POLYA_REPORT = '{OUTDIR}/{sample}_STARsolo/cutadapt_polyA_report.txt'
    params:
        THREE_PRIME_R2_POLYA = "A"*100,
        FIVE_PRIME_R2 = "CCCATGTACTCTGCGTTGATACCACTGCTT" #10x TSO sequence
        # FIVE_PRIME_R2 = "TTCGTCACCATAGTTGCGTCTCATGTACCC" #rev 10x TSO sequence
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    log:
        '{OUTDIR}/{sample}_STARsolo/cutadapt_polyA_report.txt'
    shell:
        """
        # TSO & polyA trimming
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYA} \
 		-G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
 		-o {output.A_TRIMMED_R1_FQ} \
        -p {output.A_TRIMMED_R2_FQ} \
        --cores {threads} \
        {input.MERGED_R1_FQ} {input.MERGED_R2_FQ} 1> {log}
        """
        # 2> {output.POLYA_REPORT}

#Additional trimming step, for 2-color Illumina chemistries (NextSeq, etc.)
rule trimPolyG_R2:
    input:
        A_TRIMMED_R1_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1_Atrimmed.fq.gz',
        A_TRIMMED_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_Atrimmed.fq.gz'
    output:
        FINAL_R1_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1_final.fq.gz'),
        FINAL_R2_FQ = temp('{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_final.fq.gz'),
        POLYG_REPORT = '{OUTDIR}/{sample}_STARsolo/cutadapt_polyG_report.txt'
    params:
        THREE_PRIME_R2_POLYG = "G"*100,
        FIVE_PRIME_R2 = "AAGCAGTGGTATCAACGCAGAGTACATGGG" # rev-comp of 10x TSO sequence
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    log:
        log = '{OUTDIR}/{sample}_STARsolo/cutadapt_polyG_report.txt'
    shell:
        """
        cutadapt \
        --minimum-length 10 \
        -A {params.THREE_PRIME_R2_POLYG} \
 		-G {params.FIVE_PRIME_R2} \
        --pair-filter=any \
 		-o {output.FINAL_R1_FQ} \
        -p {output.FINAL_R2_FQ} \
        --cores {threads} \
        {input.A_TRIMMED_R1_FQ} {input.A_TRIMMED_R2_FQ} 1> {log.log}
        """

        #*Note- tried `--polyA` flag in trim_galore with no luck, unfortunately...
        # trim_galore \
        # --length 10 \
        # --cores {threads} \
        # --basename {params.SAMPLE}_R2 \
        # --nextera \
        # --polyA \
        # --phred33 \
        # {params.R2_FQ}

rule postTrim_FastQC_R2:
    input:
        FINAL_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_final.fq.gz'
    output:
        fastqcDir = directory('{OUTDIR}/{sample}_STARsolo/postTrim_fastqc_R2_out'),
        # fastqcReport = ''
    threads:
        config['CORES']
        # min([config['CORES'],8]) # 8 core max based on recommendations from trim_galore authors
    shell:
        """
        mkdir -p {output.fastqcDir}
        cd {output.fastqcDir}

        fastqc \
        --outdir {output.fastqcDir} \
        --threads {threads} \
        {input.FINAL_R2_FQ}
        """

#############################################
## Alignment
#############################################
# Make output directory, align fastqs, and generate raw/filtered feature/cell-barcode matrices
#   Info for STARsolo command line paramaters: https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md

rule STARsolo_align:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        FINAL_R1_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R1_final.fq.gz',
        FINAL_R2_FQ = '{OUTDIR}/{sample}_STARsolo/tmp/{sample}_R2_final.fq.gz'
    output:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam', #TODO: add temp()
        UNMAPPED1 = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate1',
        UNMAPPED2 = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2',
        UNIQUE_POS_BG = '{OUTDIR}/{sample}_STARsolo/Unique.pos.bedGraph',
        UNIQUE_NEG_BG = '{OUTDIR}/{sample}_STARsolo/Unique.neg.bedGraph',
        UNIQUE_MULTI_POS_BG = '{OUTDIR}/{sample}_STARsolo/UniqueMultiple.pos.bedGraph',
        UNIQUE_MULTI_NEG_BG = '{OUTDIR}/{sample}_STARsolo/UniqueMultiple.neg.bedGraph',
        GENE = directory('{OUTDIR}/{sample}_STARsolo/Solo.out/Gene'),
        GENEFULL = directory('{OUTDIR}/{sample}_STARsolo/Solo.out/GeneFull'),
        SJ = directory('{OUTDIR}/{sample}_STARsolo/Solo.out/SJ'),
        VEL = directory('{OUTDIR}/{sample}_STARsolo/Solo.out/Velocyto'),
        GENEMAT = '{OUTDIR}/{sample}_STARsolo/Solo.out/Gene/raw/matrix.mtx.gz',
        GENEFULLMAT = '{OUTDIR}/{sample}_STARsolo/Solo.out/GeneFull/raw/matrix.mtx.gz',
        SJMAT = '{OUTDIR}/{sample}_STARsolo/Solo.out/SJ/raw/matrix.mtx.gz',
        VELMAT = '{OUTDIR}/{sample}_STARsolo/Solo.out/Velocyto/raw/spliced.mtx.gz'
    params:
        OUTDIR = config['OUTDIR'],
        STAR_EXEC = config['STAR_EXEC'],
        STAR_REF = config['STAR_REF'],
        UMIlen = config['UMIlen'],
        MEMLIMIT = config['MEMLIMIT']
    threads:
        config['CORES']
    shell: #*NOTE* ``--soloBarcodeReadLength 0` should be removed to ensure read-length checking on BC read (R1) is performed
        """
        mkdir -p {params.OUTDIR}/{wildcards.sample}_STARsolo

        {params.STAR_EXEC} \
        --runThreadN {threads} \
        --outFileNamePrefix {params.OUTDIR}/{wildcards.sample}_STARsolo/ \
        --outSAMtype BAM SortedByCoordinate \
        --outSAMattributes NH HI nM AS CR UR CB UB GX GN sS sQ sM \
        --readFilesCommand zcat \
        --soloUMIlen {params.UMIlen} \
        --genomeDir {params.STAR_REF} \
        --genomeLoad LoadAndKeep \
        --limitBAMsortRAM={params.MEMLIMIT} \
        --readFilesIn {input.FINAL_R2_FQ} {input.FINAL_R1_FQ} \
        --clipAdapterType CellRanger4 \
        --outReadsUnmapped Fastx \
        --outFilterMismatchNoverLmax 0.05 \
        --outFilterMatchNmin 16 \
        --outFilterScoreMinOverLread 0 \
        --outFilterMatchNminOverLread 0 \
        --outFilterMultimapNmax 50 \
        --soloType CB_UMI_Simple \
        --soloBarcodeReadLength 0 \
        --soloCBwhitelist {input.CB_WHITELIST} \
        --soloCellFilter EmptyDrops_CR \
        --soloFeatures Gene GeneFull SJ Velocyto \
        --soloMultiMappers EM

        gzip -qf {output.GENE}/raw/*
        gzip -qf {output.GENE}/filtered/*

        gzip -qf {output.GENEFULL}/raw/*
        gzip -qf {output.GENEFULL}/filtered/*

        gzip -qf {output.SJ}/raw/*

        gzip -qf {output.VEL}/raw/*
        gzip -qf {output.VEL}/filtered/*

        mv {OUTDIR}/{wildcards.sample}_STARsolo/Signal.UniqueMultiple.str1.out.bg {output.UNIQUE_MULTI_POS_BG}
        mv {OUTDIR}/{wildcards.sample}_STARsolo/Signal.UniqueMultiple.str2.out.bg {output.UNIQUE_MULTI_NEG_BG}

        mv {OUTDIR}/{wildcards.sample}_STARsolo/Signal.Unique.str1.out.bg {output.UNIQUE_POS_BG}
        mv {OUTDIR}/{wildcards.sample}_STARsolo/Signal.Unique.str2.out.bg {output.UNIQUE_NEG_BG}
        """
        # Options to output bedGraph/bigWIgs (not properly dedup'ed though!)
        # --outWigType bedGraph \
        # --outWigStrand Stranded \
        # --outWigNorm RPM \

rule indexSortedBAM:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam'
    output:
        BAI = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam.bai'
    threads:
        config['CORES']
    shell:
        """
        samtools index -@ {threads} {input.SORTEDBAM}
        """


# # Mark/remove duplicates - **STAR**
# rule star_dedupBAM:
#     input:
#         CB_WHITELIST = config['CB_WHITELIST'],
#         SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam',
#     output:
#         DEDUPBAM = '{OUTDIR}/{sample}_STARsolo/Processed.out.bam'
#     params:
#         PICARD_EXEC = config['PICARD_EXEC'],
#         OUTDIR = config['OUTDIR'],
#         TMPDIR = '{OUTDIR}/{sample}_STARsolo/_STARtmp',
#         STAR_EXEC = config['STAR_EXEC']
#         # TMPBAM = '{OUTDIR}/{sample}_STARsolo/tmp.bam'
#     threads:
#         config['CORES']*2
#     shell:
#         """
#         {params.STAR_EXEC} \
#         --runMode inputAlignmentsFromBAM \
#         --inputBAMfile {input.SORTEDBAM} \
#         --readFilesType SAM SE \
#         --outFileNamePrefix {params.OUTDIR}/{wildcards.sample}_STARsolo/ \
#         --limitBAMsortRAM 32000000000 \
#         --outTmpDir {params.TMPDIR} \
#         --bamRemoveDuplicatesType UniqueIdentical
#         """
#
# rule star_indexDedupBAM:
#     input:
#         SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Processed.out.bam'
#     output:
#         BAI = '{OUTDIR}/{sample}_STARsolo/Processed.out.bam.bai'
#     threads:
#         config['CORES']
#     shell:
#         """
#         samtools index -@ {threads} {input.SORTEDBAM}
#         """

# Remove reads that don't have a corrected spot/cell barcode with samtools, then remove duplicates w/ **umi-tools**
## High mem usage? Check here! https://umi-tools.readthedocs.io/en/latest/faq.html
rule umitools_dedupBAM:
    input:
        CB_WHITELIST = config['CB_WHITELIST'],
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam'
    output:
        DEDUPBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out.bam',
        TMPBAM = temp('{OUTDIR}/{sample}_STARsolo/tmp.bam')
    params:
        OUTPUT_PREFIX='{OUTDIR}/{sample}_STARsolo/umitools_dedup/{sample}',
        # TMPBAM = '{OUTDIR}/{sample}_STARsolo/tmp.bam'
    threads:
        config['CORES']
        #1
    log:
        '{OUTDIR}/{sample}_STARsolo/umitools_dedup/dedup.log'
    shell:
        """
        samtools view -1 -b \
        -@ {threads} \
        --tag-file CB:{input.CB_WHITELIST} \
        {input.SORTEDBAM} \
        > {output.TMPBAM}

        samtools index \
        -@ {threads} \
        {output.TMPBAM}

        umi_tools dedup \
        -I {output.TMPBAM} \
        --extract-umi-method=tag \
        --umi-tag=UB \
        --cell-tag=CB \
        --method=unique \
        --per-cell \
        --unmapped-reads=discard \
        --log {log} \
        -S {output.DEDUPBAM}

        """
        # rm {params.TMPBAM}
        # rm (params.TMPBAM).bai

rule umitools_indexDedupBAM:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out.bam'
    output:
        BAI = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out.bam.bai'
    threads:
        config['CORES']
    shell:
        """
        samtools index -@ {threads} {input.SORTEDBAM}
        """

# Mark/remove duplicates - **picard**
## https://broadinstitute.github.io/picard/command-line-overview.html#UmiAwareMarkDuplicatesWithMateCigar
# rule dedupBAM:
#     input:
#         CB_WHITELIST = config['CB_WHITELIST'],
#         SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam'
#     output:
#         DEDUPBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out.bam',
#         UMI_METRICS = '{OUTDIR}/{sample}_STARsolo/picard/umi_metrics.txt',
#         DUPLICATE_METRICS = '{OUTDIR}/{sample}_STARsolo/picard/duplicate_metrics.txt'
#     params:
#         PICARD_EXEC = config['PICARD_EXEC'],
#         TMPBAM = '{OUTDIR}/{sample}_STARsolo/tmp.bam'
#     log:
#         '{OUTDIR}/{sample}_STARsolo/picard/UmiAwareMarkDuplicatesWithMateCigar.log'
#     threads:
#         config['CORES']
#         #1
#     shell:
#         """
#         samtools view -1 \
#         -@ {threads} \
#         --tag-file CB:{input.CB_WHITELIST} \
#         {input.SORTEDBAM} \
#         > {params.TMPBAM}
#
#         samtools index \
#         -@ {threads} \
#         {params.TMPBAM}
#
#         java -jar {params.PICARD_EXEC} \
#         UmiAwareMarkDuplicatesWithMateCigar \
#         UMI_TAG_NAME=UB \
#         BARCODE_TAG=CB \
#         REMOVE_DUPLICATES=true \
#         ASSUME_SORT_ORDER=coordinate \
#         I={params.TMPBAM} \
#         O={output.DEDUPBAM} \
#         M={output.DUPLICATE_METRICS} \
#         UMI_METRICS={output.UMI_METRICS} \
#         2> {log}
#         """

#############################################
## QC on STAR outputs
#############################################

## qualimap on aligned reads
rule qualimapQC:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam'
    output:
        qualimapDir = directory('{OUTDIR}/{sample}_STARsolo/qualimap_out'),
        fastqcReport = '{OUTDIR}/{sample}_STARsolo/qualimap_out/qualimapReport.html'
    params:
        GENES_GTF = config['GENES_GTF']
    threads:
        config['CORES']
    shell:
        """
        mkdir -p {output.qualimapDir}
        cd {output.qualimapDir}

        qualimap rnaseq \
        -bam {input.SORTEDBAM} \
        -gtf {params.GENES_GTF} \
        --sequencing-protocol strand-specific-forward \
        --sorted \
        --java-mem-size=4G \
        -outdir {output.qualimapDir} \
        -outformat html
        """
        # -nt {threads} \

#TODO- RSeQC

# umi_tools group -I Aligned.sortedByCoord.out.bam --group-out=grouped.tsv --log=group.log --extract-umi-method=tag --umi-tag=CB


#############################################
## Unmapped read analyses
#############################################

# Run fastqc on unmapped reads; switch names because of STAR weirdness
rule unmapped_fastqc:
    input:
        UNMAPPED1 = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate1',
        UNMAPPED2 = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2'
    output:
        UNMAPPED1_FQ = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate1.fastq.gz',
        UNMAPPED2_FQ = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2.fastq.gz',
        FQC_DIR = directory('{OUTDIR}/{sample}_STARsolo/Unmapped_fastqc_out')
    params:
        FASTQC_EXEC = config['FASTQC_EXEC']
    threads:
        config['CORES']
    shell:
        """
        mv {input.UNMAPPED1} {input.UNMAPPED2}.fastq
        mv {input.UNMAPPED2} {input.UNMAPPED1}.fastq

        pigz -p{threads} {input.UNMAPPED1}.fastq {input.UNMAPPED2}.fastq

        mkdir -p {output.FQC_DIR}

        {params.FASTQC_EXEC} -o {output.FQC_DIR} -t {threads} {output.UNMAPPED1_FQ} {output.UNMAPPED2_FQ}
        """

# Only BLAST R2, which contains the insert (converts .fq to .fa, then removes the .fa file)
## TODO: change demux step to fastx-collapser
rule blast_unmapped:
    input:
        UNMAPPED2_FQ = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2.fastq.gz'
    output:
        BLAST_R2 = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2_blastResults.txt'
    threads:
        config['CORES']
    params:
        blastDB = config['BLASTDB'],
        FASTX_COLLAPSER = config['FASTX_COLLAPSER'],
        TMP_FA = '{OUTDIR}/{sample}_STARsolo/Unmapped.out.mate2.fa'
    shell:
        """
        zcat {input.UNMAPPED2_FQ} | sed -n '1~4s/^@/>/p;2~4p' > {params.TMP_FA}

        echo "Number of unmapped reads: "
        grep -c ">" {params.TMP_FA}

        vsearch --sortbysize {params.TMP_FA} --topn 1000 --output tmp.fa

        blastn -db {params.blastDB}/nt \
        -query tmp.fa \
        -out {output.BLAST_R2} \
        -outfmt '6 qseqid sseqid stitle pident length mismatch gapopen qstart qend sstart send evalue bitscore' \
        -max_target_seqs 5 \
        -num_threads {threads}

        rm {params.TMP_FA}
		"""

# cat {input.UNMAPPED1_FQ} | awk '{{if(NR%4==1) {{printf(">%s\n",substr($0,2));}} else if(NR%4==2) print;}}' > {params.TMP_FA}


#############################################
## miRge3.0 analysis
#############################################
#TODO- conda env mismatch issue
# rule miRge3:
#     input:
#         FINAL_R1_FQ = '{OUTDIR}/{sample}/tmp/merged_R1_trimmed.fastq.gz'
#     output:
#         # MIRGE_HTML = '{OUTDIR}/{SAMPLE}/miRge/annotation.report.html'
#         MIRGE_CHECK= '{OUTDIR}/{sample}/miRge_check.txt'
#     params:
#         OUTDIR = config['OUTDIR'],
#         MIRGE_EXEC = config['MIRGE_EXEC'],
#         MIRGE_LIB = config['MIRGE_LIB'],
#         SPECIES = config['SPECIES'],
#         # UMIlen = config['UMIlen'],
#         MEMLIMIT = config['MEMLIMIT']
#     threads:
#         config['CORES']
#     shell:
#         """
#         {params.MIRGE_EXEC} \
#         -s {input.FINAL_R1_FQ} \
#         -lib {params.MIRGE_LIB} \
#         -on {params.SPECIES} \
#         -db mirbase \
#         -o {params.OUTDIR}/{wildcards.SAMPLE} \
#         --threads {threads} \
#         -gff -nmir -ai && touch {output.MIRGE_CHECK}
#         """
# mkdir -p {params.OUTDIR}/{wildcards.SAMPLE}/miRge
# -a illumina \
# -trf


#############################################
## Additional files for visualization
#############################################

rule bamToSplitBigWig:
    input:
        BAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out.bam',
        BAI = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out.bam.bai'
    output:
        POS_BW = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out_plus.bw',
        MERGED_BW = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.dedup.out_merged.bw'
    params:
        BAM2SPLITBW=config['BAM2SPLITBW'],
        STAR_REF = config['STAR_REF'],
        OUTPUT_DIR = '{OUTDIR}/{sample}_STARsolo'
    threads:
        config['CORES']
    shell:
        """
        {params.BAM2SPLITBW} {input.BAM} {threads} {params.OUTPUT_DIR} {STAR_REF}/chrNameLength.txt
        """
