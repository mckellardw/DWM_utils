########################################################################################################
# STARsolo_10x
#   Snakemake workflow to use STARsolo to align and quantify 10x Chromium datasets
#   v1.0
#   Written by David McKellar
#   Last edited: 5/10/21, DWM
########################################################################################################

import pdb
import pandas as pd
import glob

########################################################################################################
# Config file
########################################################################################################
configfile:'config.yaml'
########################################################################################################
# Directories and locations
########################################################################################################
# DATADIR = config['DATADIR']
TMPDIR = config['TMPDIR']
OUTDIR = config['OUTDIR']

########################################################################################################
# Variables and references
########################################################################################################
SAMPLES = list(pd.read_csv(config['SAMPLE_SHEET'])['sampleID'])
FASTQDIR = list(pd.read_csv(config['SAMPLE_SHEET'])['fastq_dir'])
#import glob #TODO - account for multi fastq input

# Find R1 fastqs
# R1_FASTQS = ['{FASTQDIR}/{sample}{FQ_EXTENSION1}R1{FQ_EXTENSION2}'.format(FASTQDIR=FASTQDIR, sample=sample, FQ_EXTENSION1=config['FQ_EXTENSION1'], FQ_EXTENSION2=config['FQ_EXTENSION2']) for FASTQDIR, sample in zip(FASTQDIR, SAMPLES)]
# R1_FASTQS_GLOB = []
# for fastq in R1_FASTQS:
#     R1_FASTQS_GLOB += glob.glob(fastq)

# Find R2 fastqs
# R2_FASTQS = ['{FASTQDIR}/{sample}{FQ_EXTENSION1}R2{FQ_EXTENSION2}'.format(FASTQDIR=FASTQDIR, sample=sample, FQ_EXTENSION1=config['FQ_EXTENSION1'], FQ_EXTENSION2=config['FQ_EXTENSION2']) for FASTQDIR, sample in zip(FASTQDIR, SAMPLES)]
# R2_FASTQS_GLOB = []
# for fastq in R2_FASTQS:
#     R2_FASTQS_GLOB += glob.glob(fastq)

# print(R1_FASTQS)

STAR_REF = config['STAR_REF']
FQ_EXTENSION1 = config['FQ_EXTENSION1']
FQ_EXTENSION2 = config['FQ_EXTENSION2']

########################################################################################################
# Executables
########################################################################################################
STAR_EXEC = config['STAR_EXEC']

########################################################################################################
rule all:
    input:
        # expand('{OUTDIR}/{sample}_STARsolo/Solo.out/Gene/filtered/matrix.mtx', OUTDIR=config['OUTDIR'], sample=SAMPLES)
        # expand('{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam.bai', OUTDIR=config['OUTDIR'], sample=SAMPLES)
        
        expand('{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out_plus.bw', OUTDIR=config['OUTDIR'], sample=SAMPLES)

#############################################
## Pre-alignment set up
#############################################
# Unzip the whitelist file if it hasn't been done yet
rule gunzipWhitelist:
    input:
        config['CB_WHITELIST']+'.gz'
    output:
        config['CB_WHITELIST']
    shell:
        """
        gunzip {input}
        """

#############################################
## Alignment
#############################################
# Make output directory, align fastqs, and generate first-pas raw/filtered feature/cell-barcode matrices
#   Info for STARsolo command line paramaters: https://github.com/alexdobin/STAR/blob/master/docs/STARsolo.md
rule STARsolo_align:
    input:
        R1_FQ = pd.DataFrame(['{dir}/{id}{FQ_EXTENSION1}R1{FQ_EXTENSION2}'.format(dir=FASTQDIR, id=SAMPLES, FQ_EXTENSION1=config['FQ_EXTENSION1'], FQ_EXTENSION2=config['FQ_EXTENSION2']) for FASTQDIR, SAMPLES in zip(FASTQDIR, SAMPLES)]).applymap(glob.glob).values.tolist(),
        R2_FQ = pd.DataFrame(['{dir}/{id}{FQ_EXTENSION1}R2{FQ_EXTENSION2}'.format(dir=FASTQDIR, id=SAMPLES, FQ_EXTENSION1=config['FQ_EXTENSION1'], FQ_EXTENSION2=config['FQ_EXTENSION2']) for FASTQDIR, SAMPLES in zip(FASTQDIR, SAMPLES)]).applymap(glob.glob).values.tolist(),
        CB_WHITELIST = config['CB_WHITELIST']
    output:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam',
        RAWMAT = '{OUTDIR}/{sample}_STARsolo/Solo.out/Gene/raw/matrix.mtx',
        FILTEREDMAT = '{OUTDIR}/{sample}_STARsolo/Solo.out/Gene/filtered/matrix.mtx'
    params:
        OUTDIR = config['OUTDIR'],
        STAR_EXEC = config['STAR_EXEC'],
        STAR_REF = config['STAR_REF'],
        UMIlen = config['UMIlen'],
        MEMLIMIT = config['MEMLIMIT']
    threads:
        config['CORES']
    shell:
        """
        echo {input.R1_FQ}

        mkdir -p {params.OUTDIR}/{wildcards.sample}_STARsolo

        {params.STAR_EXEC} \
        --runThreadN {threads} \
        --outFileNamePrefix {params.OUTDIR}/{wildcards.sample}_STARsolo/ \
        --outSAMtype BAM SortedByCoordinate \
        --readFilesCommand zcat \
        --soloUMIlen {params.UMIlen} \
        --genomeDir {params.STAR_REF} \
        --genomeLoad LoadAndKeep \
        --limitBAMsortRAM={params.MEMLIMIT} \
        --readFilesIn {input.R2_FQ} {input.R1_FQ} \
        --soloType CB_UMI_Simple \
        --soloCBwhitelist {input.CB_WHITELIST} \
        --soloCellFilter EmptyDrops_CR \
        --soloFeatures Gene GeneFull SJ Velocyto \
        --soloMultiMappers EM
        """

rule indexBAM:
    input:
        SORTEDBAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam'
    output:
        BAI = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam.bai'
    threads:
        config['CORES']
    shell:
        """
        samtools index -@ {threads} {input.SORTEDBAM}
        """

#############################################
## Counting transcripts
#############################################

# Re-count multi transcripts, but account for multi-mapping reads. Uses EM to distribute reads across loci
#   requires STAR version >= 2.9
# rule STARsolo_multiMap_EM:
#     input:
#         RAWMATDIR = '{OUTDIR}/{sample}_STARsolo/Solo.out/Gene/raw',
#         BAI = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam.bai'
#     output:
#         MULTIMATDIR = directory('{OUTDIR}/{sample}_STARsolo/Solo.out/Gene/multiEM/')
#     params:
#         STAR_EXEC = config['STAR_EXEC'],
#         STAR_REF = config['STAR_REF'],
#         OUTDIR = config['OUTDIR']
#     shell:
#         """
#         {params.STAR_EXEC} \
#         --runMode soloCellFiltering \
#         {input.RAWMATDIR} \
#         {output.MULTIMATDIR} \
#         --soloCellFilter EmptyDrops_CR \
#         --soloMultiMappers EM
#         """
#
# /programs/STAR/STAR \
# --runMode soloCellFiltering \
# # --genomeDir /workdir/dwm269/genomes/mm10_all/mm10_STAR \
# ./Solo.out/Gene/raw \
#  ./Solo.out/Gene/multiEMtest \
# --soloCellFilter EmptyDrops_CR \
# --soloMultiMappers EM

rule bamToSplitBigWig:
    input:
        BAM = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam',
        BAI = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out.bam.bai'
    output:
        POS_BW = '{OUTDIR}/{sample}_STARsolo/Aligned.sortedByCoord.out_plus.bw',
    params:
        BAM2SPLITBW=config['BAM2SPLITBW'],
        STAR_REF = config['STAR_REF'],
        OUTPUT_DIR = '{OUTDIR}/{sample}_STARsolo'
    threads:
        config['CORES']
    shell:
        """
        {params.BAM2SPLITBW} {input.BAM} {threads} {params.OUTPUT_DIR} {STAR_REF}/chrNameLength.txt
        """
